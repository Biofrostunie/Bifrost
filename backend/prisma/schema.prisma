// This is your Prisma schema file

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String                   @id @default(uuid()) @db.Uuid
  email                  String                   @unique
  passwordHash           String
  fullName               String?
  phone                  String?
  address                String?
  isEmailVerified        Boolean                  @default(false)
  emailVerificationToken String?
  passwordResetToken     String?
  passwordResetExpires   DateTime?
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime                 @updatedAt
  profile                UserProfile?
  expenses               Expense[]
  incomes                Income[]
  interactions           EducationalInteraction[]
  simulations            InvestmentSimulation[]

  @@map("users")
}

model UserProfile {
  id             String   @id @default(uuid()) @db.Uuid
  userId         String   @unique @db.Uuid
  monthlyIncome  Decimal? @db.Decimal(10, 2)
  financialGoals String[]
  riskTolerance  String? // 'conservative', 'moderate', 'aggressive'
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_profiles")
}

model Expense {
  id          String   @id @default(uuid()) @db.Uuid
  userId      String   @db.Uuid
  description String
  amount      Decimal  @db.Decimal(10, 2)
  category    String
  date        DateTime @db.Date
  essential   Boolean  @default(false)
  notes       String?
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, date(sort: Desc)])
  @@map("expenses")
}

model Income {
  id          String   @id @default(uuid()) @db.Uuid
  userId      String   @db.Uuid
  source      String
  amount      Decimal  @db.Decimal(10, 2)
  recurrent   Boolean  @default(false)
  description String?
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("incomes")
}

model FinancialConcept {
  id              String                   @id @default(uuid()) @db.Uuid
  title           String
  description     String
  category        String
  difficultyLevel String? // 'beginner', 'intermediate', 'advanced'
  tags            String[]
  createdAt       DateTime                 @default(now())
  interactions    EducationalInteraction[]

  @@index([category])
  @@map("financial_concepts")
}

model EducationalInteraction {
  id              String            @id @default(uuid()) @db.Uuid
  userId          String            @db.Uuid
  contentType     String // 'concept', 'book', 'article'
  contentId       String            @db.Uuid // FIXED: Changed from String to String @db.Uuid
  interactionType String // 'like', 'save', 'view'
  createdAt       DateTime          @default(now())
  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  concept         FinancialConcept? @relation(fields: [contentId], references: [id], onDelete: Cascade)

  @@unique([userId, contentId, interactionType])
  @@index([userId, contentType, contentId])
  @@map("educational_interactions")
}

model InvestmentSimulation {
  id                  String   @id @default(uuid()) @db.Uuid
  userId              String   @db.Uuid
  initialAmount       Decimal  @db.Decimal(10, 2)
  monthlyContribution Decimal? @db.Decimal(10, 2)
  annualReturnRate    Decimal  @db.Decimal(5, 2)
  timePeriodMonths    Int
  simulationName      String?
  createdAt           DateTime @default(now())
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("investment_simulations")
}
